Abstraction: Levels of hiding the programming elements

Access Modifiers:
a)Private : 
    i.If you define method or variable as private then they can be accessed only with in the class in which they are defined. 
    ii.If you don't define any access -modifier by default it is private.
    iii.Only for Test classes we define private.
 
 Syntax:
 	private class Sample {

	}
b)Protected : 
    i.If you define method or variable as Protected ,they can be accessed only with in the class  and with in child class or inherited class.

Syntax:
	protected class Sample {

	}
c)Public : 
    i. If you define class, method ,variable as public ,they can be accessed with any class or any where within the Salesforce application.

Syntax:
 	public class Sample {

	}
d)Global : 
    i.If you define class,method,variable as global ,they can be accessed anywhere i.e With in the application or outside the application.
    ii.Generally we declare Global for webservice (Integrations).

Syntax:
	global class Sample {

	}

Variable Declaration: Examples:
global /public /protected/private dataType variableName;

global String name;
public Integer age;
protected String lastName;
private String city;

memberMethod Declaration Examples:
global/public/protected/private returnType methodName(parameters)

Example:

public class AbstractionExample {
	private string Name;
}

Execute the below code in Anonymous window:
AbstractionExample aex = new AbstractionExample();
aex.Name = 'Test';

//Output: Variable is not visible: AbstractionExample.Name

Note:Private variable & methods not visible to make it visible

Apex Class:

public class TestVisibleExample {
    // Private member variable
    @TestVisible private static Integer recordNumber = 1;

    // Private method
    @TestVisible private static void updateRecord(String name) {
        // Do something
    }
}

Test Class:

@isTest
private class TestVisibleExampleTest {
    @isTest static void test1() {
        // Access private variable annotated with TestVisible
        Integer i = TestVisibleExample.recordNumber;
        System.assertEquals(1, i);

        // Access private method annotated with TestVisible
        TestVisibleExample.updateRecord('RecordName');
        // Perform some verification
    }
}
