Note:
1. Number of DML rows we can perform on a single transcation is : 10K records
2. Number of records we can process using import wizard is : 50k records
3. Number of records we can process using Data loader is : 5 Million records

                                                                          Batch Apex

        1.When you want to process large number of records on daily basis or specific time in a day or weekly or monthly then there is a possibilty of encountering 
	  the governing limits.
   
	2.To resolve the governing limits issue ,we will run the operation as asynchronous operation using batch apex.
  
	3.Batch Apex is exposed as an interface that must be implemented by the developer. Batch jobs can be programmatically invoked at runtime using Apex.
	  
	4.Batch Apex  will break the larger set of records into no of batches with small set of data and every batch will run independent from each other with fresh 
	set of governing limits. 
	
	5. If you want any Apex class to run like Batch Apex,That Apex class has to implement an Interface called:: database.Batchable interface .
	   
	6. Any Apex class which implements Database.Batchable interaface should define three methods
		          a.Start 
		          b.Execute
		          c.Finish
	7.start :
		a. This method will be called at the starting of the Batch Job and collects the data on which the Batch job need to be operated.
			 
		b.Syntax : Database.QueryLocator |Iterable<SObject> start(Database.BatchableContext bc){}
		
		c.Database.QueryLocator : It will support 50 Million records
		  
		e.Iterable: If you use Iterable then it is still under Governor Limits only (We will use this in rear cases only like when you want to get data from 
		   different objects and the update accordingly we will use Iterable).

		f.Start method will break the list of records into no of batches and invoke the execute method on every batch
		
		g.Database.BatchableContext: This is used to track the status of the Job
		
	8. execute: 
		a. This method will be invoked by the start method on every batch of records.
    
		b. This method will contain business logic that need to performed on the records fetched from the start method .
		   
		c.Syntax : void execute(Database.BatchableContext bc,List<Sobject> scope)
		
		d.List<Sobject> contains the list of records in the batch job on which this execute method is running .
		 
		e. Example : If the start method fetched 1000 records and divided them into five batches with 200 records in each batch.Then execute method will be 
		   called on every batch separatly(execute method will be called 5 times);
			  		  
	9.finish :
		a. This method will be called after executing all the execute method.
    
		b. This method is used to send confirmation emails or post batch operations.
    
		c. Syntax :  void finish(Database.BatchableContext)
    
    		d. The other use of Batch Apex is We can call another Batch Apex inside Finish method.
	
Example 1: Fetch all the opportunity which are created today and with with stagename as closed won and update their closeDate as closed won.
	
Note: As Per my organization in day 15,000 to 20,000 opportunity records which will be closed. According to governing limits we can only perform DML operation on 
      10,000 records with in a transaction ,so we are choosing batch apex to handle this operation.

Note: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm
  
Example 1: I want to fetch all Accounts and update the description through Batch Apex?

Batch Apex Class:

public class BatchApexExample implements Database.Batchable<sObject>{
    public Database.QueryLocator start(Database.BatchableContext bc){
        system.debug('Start Method');
        return Database.getQueryLocator([select id,Name,Phone,Description from Account]);
    }
    public void execute(Database.BatchableContext bc , List<Account> lstacc){
        system.debug('Execute Method');
        for(Account acc : lstacc){
            acc.description = 'Account description updated successfully through batch Apex';
        }
        update lstacc;
    }
    
    public void finish(Database.BatchableContext bc){
        system.debug('Finish Method');
        AsyncApexJob a = [SELECT Id, Status, NumberOfErrors, JobItemsProcessed,
                          TotalJobItems, CreatedBy.Email
                          FROM AsyncApexJob WHERE Id =:bc.getJobId()];
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {'anji.gopanaboina@gmail.com'};
            mail.setToAddresses(toAddresses);
        mail.setSubject('Apex Sharing Recalculation ' + a.Status);
        mail.setPlainTextBody('The batch Apex job processed ' + a.TotalJobItems +' batches with '+ a.NumberOfErrors + ' failures.');
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
    }
}

Execute the below code in Anonymous window:
BatchApexExample be = new BatchApexExample();
id jobId = Database.executeBatch(be, 150);
system.debug('jobId ::' + jobId);

Batch Apex : Finish method email notification example

Q) How many ways we can call the Batch Apex?
   Through Schedule Apex, Through Triggers, through Apex class, through controllers, through Anonymous window.

Note: In order to execute the Batch class we need to use Database.execute(BatchclassObjectName, Batch size)

Requirement: When an Opportunity is Closed Won, then create a new Opportunity with same information name OpportunityName_cloned and stage Name = Prospecting?

Scenario: Lets say if we have 6000 records and you are updating 2000 as batch size so it will execute 3 times.	
		2000		2000		2000
		Batch1		Batch2		Batch3

Q) Is there any relation between Batch1 and Batch2?
There is no relation between each other

I want to know which records executed successfully and which records failed which executing each batch?

Q)What is Stateless?
a.Changes made by one execute will not  be transfered to another execute in the batch apex .
b.If you want to transfer  the state of the data from batch to another batch we need to implement Database.Stateful interface.
c.When a batch apex class implements Database.stateful interface state of the non-static data will be transfered  one execute to another execute method.

Note: In batch Apex we cannot use Static keyword.

In the above code lets make these modification.
Step1: Declare a variable
Step2: In order to make batch Apex stateful we use database.statefull in the Batch apex

Q)Why we cannot use static keyword in the Batch Apex?
  
 Apex Class:
 
 public class BatchApexExample implements Database.Batchable<sObject>,database.stateful {
	public integer totalCount=0;
    public Database.QueryLocator start(Database.BatchableContext bc){
        system.debug('Start Method');
        return Database.getQueryLocator([select id,Name,Phone,Description from Account]);
    }
    public void execute(Database.BatchableContext bc , List<Account> lstacc){
        system.debug('Execute Method');
        for(Account acc : lstacc){
            acc.description = 'Account description updated successfully through batch Apex';
            totalCount = totalCount + 1;
        }
        system.debug('The count is :'+ totalCount);
        update lstacc;
    }
    
    public void finish(Database.BatchableContext bc){
        system.debug('Finish Method');
        system.debug('The count is :'+ totalCount);
        AsyncApexJob a = [SELECT Id, Status, NumberOfErrors, JobItemsProcessed,
                          TotalJobItems, CreatedBy.Email
                          FROM AsyncApexJob WHERE Id =:bc.getJobId()];
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {'anji.gopanaboina@gmail.com'};
            mail.setToAddresses(toAddresses);
        mail.setSubject('Apex Sharing Recalculation ' + a.Status);
        mail.setPlainTextBody('The batch Apex job processed ' + a.TotalJobItems +' batches with '+ a.NumberOfErrors + ' failures.');
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
    }
}

Execute the below code in the Anonymous window
----------------------------------------------
BatchApexExample be = new BatchApexExample();
database.executeBatch(be, 100);


Requirement: Can we use callouts in Batch Apex?
			Yes
Step1 : We have Future callout class copy that code from Http method and then paste the same in the execute method
Step2: Upon executing the batch Apex we will get issue are Too many callouts are not allowed.
Step3: If you want to use callouts in the Batch Apex then we need to use Database.AllowsCallouts in the batch apex

Apex Class:

public class BatchApexExample implements Database.Batchable<sObject>, database.AllowsCallouts {
	public integer totalCount=0;
    public Database.QueryLocator start(Database.BatchableContext bc){
        system.debug('Start Method');
        return Database.getQueryLocator([select id,Name,Phone,Description from Account]);
    }
    public void execute(Database.BatchableContext bc , List<Account> lstacc){
        system.debug('Execute Method');
 		
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals');
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        // If the request is successful, parse the JSON response.
        if(response.getStatusCode() == 200) {
            // Deserialize the JSON string into collections of primitive data types.
            Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            // Cast the values in the 'animals' key as a list
            List<Object> animals = (List<Object>) results.get('animals');
            System.debug('Received the following animals:');
            for(Object animal: animals) {
                System.debug(animal);
            }
        }
    }
    
    public void finish(Database.BatchableContext bc){
        system.debug('Finish Method');
        system.debug('The count is :'+ totalCount);
        AsyncApexJob a = [SELECT Id, Status, NumberOfErrors, JobItemsProcessed,
                          TotalJobItems, CreatedBy.Email
                          FROM AsyncApexJob WHERE Id =:bc.getJobId()];
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {'anji.gopanaboina@gmail.com'};
            mail.setToAddresses(toAddresses);
        mail.setSubject('Apex Sharing Recalculation ' + a.Status);
        mail.setPlainTextBody('The batch Apex job processed ' + a.TotalJobItems +' batches with '+ a.NumberOfErrors + ' failures.');
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
    }
}

Execute the below code in the Anonymous window
----------------------------------------------
BatchApexExample be = new BatchApexExample();
database.executeBatch(be, 100);

Q)Can we execute One Batch apex in another batch Apex?
Yes but make sure you write in the finish method only

Q)What happens when we call the batch apex in the Start method?
It gives you an error: Database.executeBatch cannot be called from the Batch start, batch execute or Finish method

Note: In the future method also we cannot call the Batch Apex.

Q) Can we call future method in Batch Apex?
A) No Error: Too many future calls

Q) Can we call one future Apex in another future Apex?
No because there are Asynchronous process

Q) Maximum number of callouts we can perform is :100



