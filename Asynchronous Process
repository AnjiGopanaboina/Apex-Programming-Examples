Synchronous Process: One process will wait for another process to execute

Asynchronous Process: 
1.It means that a process operating independently of other process
2.One method will not wait for another method to execute.

Difference between Asynchronous Process and Synchronous Process
---------------------------------------------------------------
                Asynchronous Process                                                         Synchronous Process
                --------------------                                                         --------------------
                1.Actions that will not block the Transcation or process                      1.Quick and Immediate actions
                
                2.Duration is not priority                                                    2.Transcations are immediate and serial
                
                3.Higher Governor Limit                                                       3.Normal Governor Limit
                
There are 4 different types of Asynchronous Processes:
          a.Future Apex
          b.Batch Apex
          c.Schedule Apex
          d.Queuable Apex
 
                                                                    Future Apex
                                                                    -----------
1. If a transaction has any long running operations /statements,and if this operations is not having any dependency on rest of the statements then we can run those
statments independent from the rest of the operation by using future method.
		
  Q:: Long running Operaitons : 
	Ex: Webservice calls ,Bulk DML operations 
			
2. Rules to define future methods .
	1.All the future methods should have @future annotation.
		
	@future 
	public static void futurecall(parameters){
  
  	}
			
	2. All the future methods should be defined as static .
		
	3. All the future methods should have void as return type .
		
	4. Sobjects cannot be passsed as parameters (Why? :: For suppose I have written the future apex on Account object (List<Account>) to update Rating field from Hot 
                                              to Cold, so now that code will not execute immediatly this will go to the Queue for execution. meanwhile I am upadating 
                                              the same record from Hot to Warm, Now because the future job is Queue it will take Hot and update to cold which is
                                              creating data inconsistancy).
	Note: From the above example instead of passing S-object we can pass ID (primitive datatypes) and run the future apex it will resolve the issue
  
	5. When we invoke the future method they will be added queue and from the queue they will be executed.
		   
	6.If you want to invoke webservices from the future method then define 
			    @future(callout=true)
				
	7. Any Asyncrhronous job that is running in salesforce will be registred with 
	   AsyncApexJob object.
	
Query:
SELECT Id, CreatedDate, CreatedById, JobType, ApexClassId, Status, JobItemsProcessed, TotalJobItems, NumberOfErrors, CompletedDate, MethodName, ExtendedStatus,
ParentJobId, LastProcessed, LastProcessedOffset, CronTriggerId FROM AsyncApexJob where id = '7075i00001opmHl'

	8. How to track the status of the future method .
		a. Write a soql query on AsyncApexJob
    		b. Declarative way to check the status 
			   Setup ==> Moniter ==> Jobs ===> Apex Jobs
								 
	9. Future methods can be used to increase the governing limits .
			@future(limits=dml*2)

Q) Why Future Apex?
    TO avoid mixed DML error and to perform CallOut we use Future Apex

Note:
Callout: Salesforce will call other systems
Callin : Other systems will call Salesforce

Example 1: Synchronous Apex

public class FutureExample {
    public static void show(){
        System.debug('ShowLine one');
        System.debug('ShowLine two');
        System.debug('ShowLine three');
    }
    public static void callme(){
        System.debug('CallmeLine one');
        System.debug('CallmeLine two');
        System.debug('CallmeLine three');
    }
    public static void display(){
        System.debug('DisplayLine one');
        System.debug('DisplayLine two');
        System.debug('DisplayLine three');
        
    }
}

Execute the below code from the Anonymous window:
FutureExample.show();
FutureExample.callme();
FutureExample.display();

Output:
ShowLine one        ShowLine Two        ShowLine Three
CallmeLine one      CallmeLine Two      CallmeLine Three
DisplayLine one     DisplayLine         Two DisplayLine Three


Example 2: Asychronous Apex

public class FutureExample {
    public static void show(){
        System.debug('ShowLine one');
        System.debug('ShowLine two');
        System.debug('ShowLine three');
    }
    @future
    public static void callme(){
        System.debug('Callme Line one');
        System.debug('Callme Line two');
        System.debug('Callme Line three');
    }
    public static void display(){
        System.debug('DisplayLine one');
        System.debug('DisplayLine two');
        System.debug('DisplayLine three');
        
    }
}

Execute the below code from the Anonymous window: 
FutureExample.show();
FutureExample.callme();
FutureExample.display();

Output:
Log 1: Normal Log
ShowLine one        ShowLine Two        ShowLine Three
DisplayLine one     DisplayLine         Two DisplayLine Three

Log 2: Future log
CallmeLine one      CallmeLine Two      CallmeLine Three

In future method there is no return type ID, that is why we dont know the status of Future Method, but if you want to know the status of the future method we need to
go to Apex jobs and find there.

Note: All the Asynchronous processes will return the Job ID's but except Future Apex.

									Mixed DML Operations
									--------------------
In Salesforce there are 2 types of Objects are there : 1.Setup object and 2.Non Setup object

Setup objects are related to Salesforce Org
	Ex:User, Profile, Role, Page layout..etc

Non-setup objects are related to normal object in Salesforce
	Ex: Account, Contact, Order, Student__c, Trainer.. etc

In the same transcation or single transcation if we insert setup and Non-setup object we will get mixed DML error.

Q) Create user record and Account record using Apex?

Apex class:
----------
public class MixedDMLErrorExample {
    public void createUserandAccount(){
        //Non Setup Object
        Account acc = new Account();
        acc.Name = 'Test record 03-10-22';
        acc.Phone ='1234567890';
        acc.Rating = 'Rating';
        insert acc;
        // Setup object
        Profile p = [SELECT Id FROM Profile WHERE Name='Standard User'];
        UserRole r = [SELECT Id FROM UserRole WHERE Name='CEO' LIMIT 1];
        
        User u = new User(alias ='students', email='capital@gmail.com', 
                          emailencodingkey='UTF-8', lastname='krian', 
                          languagelocalekey='en_US', 
                          localesidkey='en_US', profileid = p.Id, userroleid = r.Id,
                          timezonesidkey='America/Los_Angeles', 
                          username='kiran@dev1.com');
        insert u;
    }
}


Execute the below code in the Anonymous window:
----------------------------------------------
MixedDMLErrorExample mdml = new MixedDMLErrorExample();
mdml.createUserandAccount();

Output: System.DmlException: Insert failed. First exception on row 0; first error: MIXED_DML_OPERATION, DML operation on setup object is not permitted after you have 
updated a non-setup object (or vice versa): User, original object: Account: []


Now create two seperate methods and make one method as Future method and try yo execute the below code?

Apex Class:
----------
public class MixedDMLErrorExample {
    public void createAccountRecord(){
        //Non Setup Object
        Account acc = new Account();
        acc.Name = 'Test record 03-10-22';
        acc.Phone ='1234567890';
        acc.Rating = 'Rating';
        insert acc;   
    }
    @future
    public static void createUserRecord(){
        // Setup object
        Profile p = [SELECT Id FROM Profile WHERE Name='Standard Platform User'];
        UserRole r = [SELECT Id FROM UserRole WHERE Name='CEO' LIMIT 1];
        
        User u = new User(alias ='students', email='capital@gmail.com', 
                          emailencodingkey='UTF-8', lastname='krian', 
                          languagelocalekey='en_US', 
                          localesidkey='en_US', profileid = p.Id, userroleid = r.Id,
                          timezonesidkey='America/Los_Angeles', 
                          username='ankith@gmail.com');
        insert u;
    }
}

Execute the below code in the Anonymous window:
----------------------------------------------
MixedDMLErrorExample mdml = new MixedDMLErrorExample();
mdml.createAccountRecord();
MixedDMLErrorExample.createUserRecord();

Output: Both User and Account records are create automatically


Q) I want to call one method inside another method

public class MixedDMLErrorExample {
    public void createAccountRecord(){
        //Non Setup Object
        Account acc = new Account();
        acc.Name = 'Test record 03-10-22';
        acc.Phone ='1234567890';
        acc.Rating = 'Rating';
        insert acc;
        createUserRecord(acc.name);
    }
    @future
    public static void createUserRecord(string acName){
        // Setup object
        Profile p = [SELECT Id FROM Profile WHERE Name='Standard Platform User'];
        UserRole r = [SELECT Id FROM UserRole WHERE Name='CEO' LIMIT 1];
        
        User u = new User(alias ='students', email='capital@gmail.com', 
                          emailencodingkey='UTF-8', lastname='krian' + acName, 
                          languagelocalekey='en_US', 
                          localesidkey='en_US', profileid = p.Id, userroleid = r.Id,
                          timezonesidkey='America/Los_Angeles', 
                          username='mynameisankith@gmail.com');
        insert u;
    }
}

Execute the below code in the Anonymous window:
----------------------------------------------
MixedDMLErrorExample mdml = new MixedDMLErrorExample();
mdml.createAccountRecord();


Drawbacks : 
  1. Future method will not return jobId in the apex code.
  2. Future method cannot be called from another future method.
  3. Future method will not support sobjects as parameters .
		
Limits :
  1. With in  a transaction we call 50 future methods .
		
UseCases : 
  1. Handle Mixed DML operations 
  2. To invoke Asyncrhronous webservices from trigger .
  3. To invoke Asyncrhronous webservices from Schedule Apex.
  4. To handle bulk dml  operations .
		
WorkAround UseCases: 
  1. When we have requirement to pass sobject as parameter to future method how will you  
	a. Pass RecordId instead of record .
	b. Serialize the sobject as string using JSON/XML and pass string as parameter to future method.










