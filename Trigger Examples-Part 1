Validation Rules:
----------------
    1.Validation rules are the mechanisam which is used to filter bad data and allow good data to enter into the Organization.
    2.Validation will work only on Before Insert and Before Update operations only.

1.Workflows:
============
Good:				                            		| Bad:
  a.Easy to use			                    			|a.It can perform only four action
  b.Mature Technology		                				i.Assign a Task
  c.Approval process can be used       		      				ii.Send an outbound message to an another software application
  d.Auomate many businesses	          	      				iii.Update the field
				                              			iv.Send a email,but it cannot Create or delete the records
				                                	|b.Workflows can only be invoked when the record changes.The Save button must be engaged either on created or edited records.
				                                	|c.No control on over execution order of workflows and support only one IF/THEN statements 
				                                	|d.It can only access some fields on related master object.there has to be a Master detail relationship between objects.If you have lookup 
		                                          		relationship between objects you cannot apply lookup.
2.Process builder:
=================
Good:							                                       Bad:
  a.Process builder supports far more actions than workflow such as chatter                    |a.PB can create the records,but it cannot grab the ID of a newly
 post,updating the child records ,Creating record,it also support versioning                      created record and do something with it.
 which is very handy.So that we can have older version andnever version.
 
 b.We can control the order of the execution with a nice drag and drop.                        |b.Process builder will not support user interactions, you can't 
   interface in the process builder.and it supports mutiple IF/THEN statements.                   display the screen and run the process based on the user input into
                                                                                                  that screen.
 
 c.Process builder can be invoked by record changes similar to workflows but                    |c.Process bulider cannot delete records.
   also by another process.Process builder also has an ability to trigger the 
   platform events which are things happening between salesforce and external
   systems which requires coding.
  
  d.Process builder can update any related records regardless of whether                        |d.Scheduled actions cannot as yet be tracked back to the record.
    the objects has mater detail or lookup relationship relationships.

3.Flow builder:
--------------
Good:							                                          Bad:
  a.Fow supports user interaction.We can create screens where the user input                      |a.Complexity-coder code and system admins run away when they see
    the data into and then we can use input in the following flow very handy.                     flow builder.they do that because if you can use flow you really
                                                                                                  understand the coding from the high level.
 
  b.Flows can be invoked by custom buttons or links and just link process                         |b.Learning curve is so long.
    builder or it also can be invoked by an  another processes.
  
  c.Flow can create,update and delete any records in salesforce.
  
  d.Flow can call othe flows.
  
Summarize:
---------
	1.Workflow is limited and static
	2.Process builder cannot interact with users and delete the records.
	3.Flow fill the gaps
	4.Flow downside-learning curve.

Triggers:
---------
    1. Trigger is a apex code that executes automatically whenever an appropriate DML operation is performed.
    2. The DML operations are Insert, Update, delete and Un-delete
    3.There are two types of Triggers - Before Triggers and After Triggers
Before Triggers:
---------------
         1.This will fire before the records commits to the database
         2.Before Triggers is a extension to Validation Rules
         3.Before Triggers are used for Validations
         2.In which cases do we write Before trigger
                a) To perform complex logics.
                       Example: Every Account will have contacts associated to it. So now, whenever we try to delete the Account it should show an error saying that 
                                we cannot delete Account because it has contacts associated to it.
                b) If you want to set default values on a field based on some condition on the same object.
                       Example: When AccountType = 'Banking', set Description as = 'This is the B to B Business'.
 After Trigger:
 -------------
        1.This will fire ones the records are committed to the database.
        2. After Triggers is an extension to Workflow, Process builders and Flows.
        3.After Triggers are used for Automations.
        4) In which cases do we write After Triggers
               a)If you want to update related object records then we use After Triggers.
                      Ex: Rollup summary can be applied in Lookup relationship as well.
               b) To sent email notification we use After Triggers.
Note: Generally, Rollup summary relationship can be applied only when there is Master detail relationship between two objects, Now by using After Trigger we apply 
      rollup summary relationship even if there is lookup relationship between the objects.
     
Trigger Events:
--------------
    There are 7 Trigger events
    
    Before events               After events
    -------------               ------------
    1.Before Insert             1. After Insert
    2.Before Update             2.After Update
    3.Before Delete             3.After Delete
                                4.After Un-delete

Trigger Context variables (TCV):
-------------------------------
  1.Where trigger is fires in thebackground, ARE is going to take care of the Trigger execution automatically. It is the responsibility of developer to use this code 
  and perform the operation.TCV responsibility is to creates variables (TCV's) and using these variables we can validate or Automate.The ARE creates these TCVâ€™s and 
  loads them with appropriate contents.ARE keeps checking which DML operation is being performed.
  
  2.All these four events (Insert,Update, Delete and Un-Delete can be placed in 2 different places.As we said the trigger is piece of code that gets fired either 
  before the DML operation is performed or after the DML operation is performed.
	                            Before Event                       After Event 
			                          Is Before  			                    Is After 
                                              Is Insert 
					                                    Is Update 
					                                    Is delete 
					                                    Is undelete
   3.What is this Is: When we write something with Is or Has it means these are Boolean type variable which defines it as either True or False.
   4.Syntax to call the Trigger events: Trigger.TCV
   
   5.Trigger.New: It will hold the list of newly created records in the format of List<S-object> listNewRecords         Ex: List<Account> listNewRecords
   6.Trigger.NewMap: It will hold the list of newly created records in the format of Map<id,value> mapNewRecords        Ex: Map<id,Account> newMapAccts
   7.Trigger.Old:It will hold the list of old records in the format of List<S-object> listOldRecords                    Ex: List<Account> listOldRecords
   8.Trigger.OldMap: It will hold the list of old records in the format of Map<id,value> mapOlsRecords                  Ex: Map<id,Account> olsMapAccts

From the above four events When to use which? Refer to diagram
   
Syntax:
------
Trigger TriggerName on S-object (Events){
  //Validations or Automations logic
}
    
      

    
